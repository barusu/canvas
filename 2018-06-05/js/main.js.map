{"version":3,"sources":["2018-06-05/script/main.js"],"names":["scope","RAF","requestAnimationFrame","window","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","setTimeout","t","radius","c","length","Trail","speed","paths","shadowBlur","arguments","undefined","prototype","paint","this","shadowColor","Points","step","old","ctx","save","grd","addColorStop","fillStyle","x","y","beginPath","arc","fill","createRadialGradient","closePath","restore","Math","PI","points","start","distance","end","vx","vy","progress","i","p1","p2","floor","sqrt","push","initCanvas","el","canvas","document","getElementById","nodeType","nodeName","devicePixelRatio","webkitBackingStorePixelRatio","backingStorePixelRatio","console","scale","clientWidth","ratio","clientHeight","error","get2DContext","trails","loop","prev","globalCompositeOperation","fillRect","width","height","forEach","addTrail","getHexagon","r","log"],"mappings":"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","file":"main.js","sourcesContent":["/**\n * Day 6\n * 轨迹线\n * 2018-06-05\n */\n\n(function(scope) {\n  var RAF = (function() {\n    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {\n      window.setTimeout(callback, 1000 / 60);\n    };\n  })();\n  // 获取 Canvas 2D 上下文\n  function get2DContext(canvas) {\n    var ctx;\n\n    if(typeof(canvas) === 'string') canvas = document.getElementById(canvas);\n    if(canvas && canvas.nodeType === 1 && canvas.nodeName === 'CANVAS') {\n      ctx = canvas.getContext('2d');\n      // 获取设备分辨率信息\n      const devicePixelRatio = window.devicePixelRatio || 1;\n      const backingStoreRatio = ctx.webkitBackingStorePixelRatio ||\n                                ctx.mozBackingStorePixelRatio ||\n                                ctx.msBackingStorePixelRatio ||\n                                ctx.oBackingStorePixelRatio ||\n                                ctx.backingStorePixelRatio || 1;\n      const ratio = devicePixelRatio / backingStoreRatio;\n      // 按比例缩放Canvas\n      canvas.width = canvas.clientWidth * ratio;\n      canvas.height = canvas.clientHeight * ratio;\n      ctx.scale(ratio, ratio);\n      return ctx;\n    }else {\n      console.error('El is not a Canvas');\n      return false;\n    }\n  }\n  // 计算两点之间的直线距离\n  function getDistance(p1, p2) {\n    return Math.sqrt((p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]));\n  }\n  // 计算竖六边形的坐标\n  function getHexagon(c, radius) {\n    if(c && radius && c.length === 2) {\n      var t = radius * 0.866;\n      return [\n        [c[0], c[1] - radius],\n        [c[0] - t, c[1] - (radius / 2)],\n        [c[0] - t, c[1] + (radius / 2)],\n        [c[0], c[1] + radius],\n        [c[0] + t, c[1] + (radius / 2)],\n        [c[0] + t, c[1] - (radius / 2)],\n        [c[0], c[1] - radius]\n      ];\n    }else return [];\n  }\n\n  // 创建轨迹类\n  var Trail = function(paths, speed = 1) {\n    this.paths = paths;\n    this.speed = speed;\n    this.shadowColor = '#fff';\n    this.shadowBlur = 10;\n    this.step = 0;\n    this.radius = 2;\n    this.old = [];\n  }\n  Trail.prototype = {\n    paint(ctx) {\n      var x = this.Points[this.step][0];\n      var y = this.Points[this.step][1];\n      if(this.old[0] != x || this.old[1] != y) {\n        this.old = [x, y];\n        ctx.save();\n        var grd = ctx.createRadialGradient(x, y, 1, x, y, this.radius);\n        grd.addColorStop(0, \"rgba(255,255,255,.4)\");\n        grd.addColorStop(1, \"rgba(255,255,255,0)\");\n        ctx.fillStyle = grd;\n        ctx.shadowColor = this.shadowColor;\n        ctx.shadowBlur = this.shadowBlur;\n        ctx.beginPath();\n        ctx.arc(x, y, this.radius * 2, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.closePath();\n        ctx.restore();\n      }\n      this.step ++;\n      if(this.step >= this.Points.length) this.step = 0;\n    },\n    get Points() {\n      var points = [], start, end, distance, vx, vy, progress, i;\n      for(i = 0; i < this.paths.length - 1; i++) {\n        start = this.paths[i];\n        end = this.paths[i + 1];\n        distance = Math.floor(getDistance(start, end));\n        vx = (end[0] - start[0]) / distance;\n        vy = (end[1] - start[1]) / distance;\n        progress = 0;\n        while(progress < distance) {\n          progress += this.speed;\n          points.push([start[0] + vx * progress, start[1] + vy * progress]);\n        }\n      }\n      return points;\n    }\n  };\n\n  scope.initCanvas = function(el) {\n    var ctx = get2DContext(el);\n    var trails = [];\n\n    function loop() {\n      ctx.fillStyle = 'rgba(0,0,0,.95)';\n      var prev = ctx.globalCompositeOperation;\n      ctx.globalCompositeOperation = 'destination-in';\n      ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n      ctx.globalCompositeOperation = prev;\n\n      trails.forEach(i => {\n        i.paint(ctx);\n      });\n      RAF(() => {\n        loop();\n      });\n    }\n\n    loop();\n\n    return {\n      addTrail(paths) {\n        trails.push(new Trail(paths));\n      },\n      getHexagon(c, r) {\n        trails.push(new Trail(getHexagon(c, r)));\n        console.log(getHexagon(c, r));\n      }\n    };\n  };\n})(window);\n\nvar canvas = initCanvas('canvas');\n\ncanvas.getHexagon([300, 200], 150);\n\n\n\n\n\n"]}